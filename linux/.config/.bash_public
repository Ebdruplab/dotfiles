# Terminal Improvements
# ---------------------

# Setup aliases
# --------------
alias cd_ebd='cd ~/git/ebdruplab'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias psg='ps aux | grep -v grep | grep -i'
alias df='df -h'
alias du='du -h -c'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias toupper="tr '[:lower:]' '[:upper:]'"
alias tolower="tr '[:upper:]' '[:lower:]'"
alias resource='source ~/.bash_profile'
alias ll='ls -alhZ'
alias llr='ls -alhr'
alias lls='ls -alhS'
alias llsr='ls -alhSr'
alias lld='ls -alht'
alias lldr='ls -alhtr'
alias lldc='ls -alhtU'
alias lldcr='ls -alhtUr'
alias ctree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"

# Enable color support for ls and add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
fi

# Add `less` alias with color support
alias less='less -R'

# Networking aliases
# -------------------
alias myip='dig +short myip.opendns.com @resolver1.opendns.com'
alias netCons='lsof -i'
alias flushDNS='dscacheutil -flushcache'
alias lsock='sudo /usr/sbin/lsof -i -P'

# Fabric Aliases
# ---------------
if [ -f "$HOME/.config/fabric/fabric-bootstrap.inc" ]; then 
    . "$HOME/.config/fabric/fabric-bootstrap.inc"
fi

# Require confirmation before overwriting target files
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

# Windows-specific alias
# -----------------------
if grep -q microsoft /proc/version; then
    alias explorer="explorer.exe ."
fi

# Functions
# -----------
function cgitadd() {
    git add .
    git commit -m "$1"
    git push
}

function parse_git_branch() {
    git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

function gstatus() {
    git status -s
}

function gcommit() {
    git add -A && git commit -m "$*"
}

function glog() {
    git log --pretty=format:"%h - %an, %ar : %s"
}

function gcheckout() {
    git branch -a
    printf "Enter branch name: "
    read branch
    git checkout "$branch"
}

function gpull() {
    git pull --rebase
}

function gbranch() {
    git checkout -b "$*"
}

function gpushnew() {
    git push -u origin "$(git branch --show-current)"
}

function gclean() {
    git branch --merged | egrep -v "(^\*|master|dev)" | xargs git branch -d
}

function gdiff() {
    git diff --color-words "$*"
}

function extract() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        printf "Usage: extract <file>\n"
        printf "Extract various types of compressed files.\n"
        printf "Supported file types:\n"
        printf "  *.tar.bz2\n"
        printf "  *.tar.gz\n"
        printf "  *.bz2\n"
        printf "  *.rar\n"
        printf "  *.gz\n"
        printf "  *.tar\n"
        printf "  *.tbz2\n"
        printf "  *.tgz\n"
        printf "  *.zip\n"
        printf "  *.Z\n"
        printf "  *.7z\n"
        printf "  *.ztd\n"
        return
    fi

    if [[ -f $1 ]]; then
        case $1 in
            *.tar.bz2) tar xjf $1 ;;
            *.tar.gz) tar xzf $1 ;;
            *.bz2) bunzip2 $1 ;;
            *.rar) unrar e $1 ;;
            *.gz) gunzip $1 ;;
            *.tar) tar xf $1 ;;
            *.tbz2) tar xjf $1 ;;
            *.tgz) tar xzf $1 ;;
            *.zip) unzip $1 ;;
            *.Z) uncompress $1 ;;
            *.7z) 7z x $1 ;;
            *.ztd) tar --use-compress-program=unzstd -xvf $1 ;;
            *) printf "'%s' cannot be extracted via extract()\n" "$1" ;;
        esac
    else
        printf "'%s' is not a valid file\n" "$1"
    fi
}

function data_usage() {
    du -sh --exclude='/proc/*' --exclude='/tmp/*' --exclude='/var/*' /* 2>/dev/null | sort -hr
}

function pssh() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        printf "Usage: pssh [user] <host>\n"
        printf "Connect via SSH with password authentication.\n"
        printf "Options:\n"
        printf "  user    Optional. Username to connect with. Default is 'root'.\n"
        printf "  host    Required. Host to connect to.\n"
        return
    fi

    local user="${1:-root}"
    shift
    ssh -l "$user" -o PreferredAuthentications=password -o PubkeyAuthentication=no "$@"
}

function issh() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        printf "Usage: issh [user] <host>\n"
        printf "Connect via SSH using a specified SSH key.\n"
        printf "Options:\n"
        printf "  user    Optional. Username to connect with. Default is 'root'.\n"
        printf "  host    Required. Host to connect to.\n"
        return
    fi

    local user="${1:-root}"
    shift
    ssh -l "$user" -i ~/.ssh/id_rsa_ssh_access "$@"
}

function check_process() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        printf "Usage: check_process <process_name>\n"
        printf "Check if a process is running.\n"
        printf "Options:\n"
        printf "  process_name   Required. The name of the process to check.\n"
        return
    fi

    local process_name="$1"

    if [[ -z "$process_name" ]]; then
        printf "Error: Process name must be specified.\n" >&2
        return 1
    fi

    if pgrep "$process_name" > /dev/null; then
        printf "Process '%s' is running.\n" "$process_name"
    else
        printf "Process '%s' is not running.\n" "$process_name"
    fi
}

function md2pdf() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        printf "Usage: md2pdf <input_file> <output_file>\n"
        printf "Convert a Markdown file to PDF using pandoc.\n"
        printf "Options:\n"
        printf "  input_file   Required. The Markdown file to convert.\n"
        printf "  output_file  Required. The name of the output PDF file.\n"
        return
    fi

    local input_file="$1"
    local output_file="$2"

    if [[ -z "$input_file" || -z "$output_file" ]]; then
        printf "Error: Both input and output files must be specified.\n" >&2
        return 1
    fi

    if [[ ! -f "$input_file" ]]; then
        printf "Error: Input file '%s' does not exist.\n" "$input_file" >&2
        return 1
    fi

    pandoc "$input_file" -o "$output_file"

    if [[ $? -eq 0 ]]; then
        printf "PDF created successfully: %s\n" "$output_file"
    else
        printf "Error creating PDF.\n" >&2
        return 1
    fi
}

function largest_files() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        printf "Usage: largest_files <directory>\n"
        printf "Show the top 10 largest files in a directory.\n"
        printf "Options:\n"
        printf "  directory   Required. The directory to search.\n"
        return
    fi

    local directory="$1"

    if [[ -z "$directory" ]]; then
        printf "Error: Directory must be specified.\n" >&2
        return 1
    fi

    if [[ ! -d "$directory" ]]; then
        printf "Error: Directory '%s' does not exist.\n" "$directory" >&2
        return 1
    fi

    find "$directory" -type f -exec du -h {} + | sort -rh | head -n 10
}

function sysinfo() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        printf "Usage: sysinfo\n"
        printf "Display detailed system information.\n"
        return
    fi

    printf "System Information:\n"
    printf "-------------------\n"
    printf "Hostname: %s\n" "$(hostname)"
    printf "Uptime: %s\n" "$(uptime -p)"
    printf "Memory Usage: %s\n" "$(free -h | grep Mem | awk '{print $3 "/" $2}')"
    printf "Disk Usage: %s\n" "$(df -h / | grep / | awk '{print $3 "/" $2 " (" $5 ")"}')"
    printf "CPU Load: %s\n" "$(uptime | awk -F'load average:' '{ print $2 }' | cut -d, -f1)"
    printf "Running Processes: %s\n" "$(ps ax | wc -l | tr -d " ")"
    printf "User: %s\n" "$(whoami)"
    printf "OS: %s\n" "$(uname -s)"
    printf "Kernel: %s\n" "$(uname -r)"
}

function monitor_disk() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        printf "Usage: monitor_disk <threshold>\n"
        printf "Monitor disk usage and alert if usage exceeds the specified threshold.\n"
        printf "Options:\n"
        printf "  threshold   Required. Disk usage percentage threshold (e.g., 90).\n"
        return
    fi

    local threshold="$1"

    if [[ -z "$threshold" ]]; then
        printf "Error: Disk usage threshold must be specified.\n" >&2
        return 1
    fi

    if ! [[ "$threshold" =~ ^[0-9]+$ ]]; then
        printf "Error: Threshold must be a number.\n" >&2
        return 1
    fi

    local usage
    usage=$(df / | grep / | awk '{ print $5 }' | sed 's/%//')

    if (( usage > threshold )); then
        printf "Warning: Disk usage is at %s%%, which exceeds the threshold of %s%%.\n" "$usage" "$threshold"
    else
        printf "Disk usage is at %s%%, which is within the threshold of %s%%.\n" "$usage" "$threshold"
    fi
}

function publish_collection() {
    if [[ -z "$1" ]]; then
        printf "You need to provide a collection archive file as an argument.\n"
    else
        ansible-galaxy collection publish "$1" --api-key="$AUTOMATIONHUB_API_KEY" -s "$AUTOMATIONHUB_SERVER"
    fi
}

function install_collection() {
    if [[ -z "$1" ]]; then
        printf "You need to provide a collection name as an argument.\n"
        printf "Usage: install_collection namespace/collection_name [--force]\n"
    else
        local url="https://<HUB_URL>/api/galaxy/"
        [[ "$2" == "--force" ]] && url="https://<HUB_URL>/api/galaxy/content/<content_location>/"
        ansible-galaxy collection install "$1" --api-key="$AUTOMATIONHUB_API_KEY" -s "$url" "${@:2}"
    fi
}

eb_lookup_ip() {
    if [ $# -eq 0 ]; then
        echo "Usage: lookup_ip <ip1> <ip2> <ip3> ..."
        return 1
    fi

    for IP in "$@"; do
        echo "Looking up IP: $IP"
        nslookup $IP
    done
}
